# main_bot.py

# ==============================================================================
#                      PROTOCOLO NAUTILUS - TELEGRAM BOT v3.2
#                    (Sistema de Ranking + C√≥digo Optimizado)
# ==============================================================================

import os
import logging
import random
import base64
import asyncio
import re
import json
import hashlib
from io import BytesIO
from typing import Dict, Optional, Any, List, Tuple
from datetime import datetime

import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
from openai import OpenAI
from PIL import Image

# Dependencias de IA Local
import torch
from transformers import BlipProcessor, BlipForConditionalGeneration

# Dependencias de Telegram
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    ConversationHandler,
    filters,
)

from database_manager import NautilusDB

# --- 1. CONFIGURACI√ìN INICIAL ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
FASTAPI_HOST = os.getenv("FASTAPI_HOST", "0.0.0.0")
FASTAPI_PORT = int(os.getenv("FASTAPI_PORT", "8000"))

if not TELEGRAM_TOKEN: 
    raise ValueError("TELEGRAM_TOKEN no encontrado.")

CANVAS_URL = "https://pixatrip1984.github.io/nautilus-canvas/"
DATA_FILE = "nautilus_research_data.json"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO,
    handlers=[logging.StreamHandler(), logging.FileHandler('nautilus_bot.log', encoding='utf-8')]
)
logger = logging.getLogger(__name__)

(FASE_1_GESTALT, FASE_2_SENSORIAL, FASE_3_BOCETO, FASE_4_CONCEPTUAL, FINALIZAR) = range(5)

user_sessions: Dict[int, Dict[str, Any]] = {}
telegram_app: Optional[Application] = None

# Base de datos de rankings
nautilus_db: Optional[NautilusDB] = None
session_start_times: Dict[int, datetime] = {}  # Para trackear tiempos de sesi√≥n

# --- 2. CONFIGURACI√ìN DE IA ---
openrouter_client: Optional[OpenAI] = None
if OPENROUTER_API_KEY:
    openrouter_client = OpenAI(base_url="https://openrouter.ai/api/v1", api_key=OPENROUTER_API_KEY)
else:
    logger.warning("OPENROUTER_API_KEY no encontrada.")

blip_processor: Optional[BlipProcessor] = None
blip_model: Optional[BlipForConditionalGeneration] = None
BLIP_MODEL_ID = "Salesforce/blip-image-captioning-base"
MISTRAL_CLOUD_MODEL_ID = "mistralai/mistral-small-3.2-24b-instruct:free"

def initialize_blip_model():
    global blip_processor, blip_model
    try:
        logger.info(f"Cargando modelo local: {BLIP_MODEL_ID}...")
        device = "cuda" if torch.cuda.is_available() else "cpu"
        blip_processor = BlipProcessor.from_pretrained(BLIP_MODEL_ID)
        blip_model = BlipForConditionalGeneration.from_pretrained(BLIP_MODEL_ID).to(device)
        logger.info(f"‚úÖ Modelo local cargado en dispositivo: {device}")
    except Exception as e:
        logger.error(f"üí• Error al cargar modelo local: {e}", exc_info=True)
        blip_model = None

# --- 3. SISTEMA DE COORDENADAS PROFESIONAL ---
def generate_professional_coordinates() -> str:
    """Genera coordenadas siguiendo el est√°ndar de programas formales de percepci√≥n remota."""
    formats = [
        lambda: f"{random.randint(1000, 9999)}-{random.randint(1000, 9999)}",
        lambda: f"{random.randint(1000, 9999)}-{random.randint(10000, 99999)}",
        lambda: f"{random.randint(10000, 99999)}-{random.randint(1000, 9999)}",
        lambda: f"{random.randint(100000, 999999)}",
        lambda: f"{random.randint(1000, 9999)}-{random.choice('ABCDEFGHJKLMNPQRSTUVWXYZ')}{random.randint(1, 9)}",
        lambda: f"{random.randint(10000, 99999)}",
    ]
    return random.choice(formats)()

# --- 4. SISTEMA DE PSEUD√ìNIMOS Y DATOS ---
def get_user_pseudonym(user_id: int) -> str:
    """Genera un pseud√≥nimo consistente para un user_id."""
    hash_input = f"nautilus_{user_id}_salt_2025"
    hash_digest = hashlib.md5(hash_input.encode()).hexdigest()
    
    prefixes = ["Alpha", "Beta", "Gamma", "Delta", "Epsilon", "Zeta", "Theta", "Lambda", "Sigma", "Omega", 
                "Nova", "Quasar", "Pulsar", "Nebula", "Cosmos", "Astral", "Stellar", "Lunar", "Solar", "Vortex"]
    suffixes = ["Explorer", "Seeker", "Voyager", "Navigator", "Observer", "Perceiver", "Sensor", "Scanner", 
                "Detector", "Finder", "Hunter", "Tracker", "Reader", "Viewer", "Seer", "Oracle", "Mystic"]
    
    prefix_idx = int(hash_digest[:2], 16) % len(prefixes)
    suffix_idx = int(hash_digest[2:4], 16) % len(suffixes)
    number = int(hash_digest[4:6], 16) % 1000
    
    return f"{prefixes[prefix_idx]}{suffixes[suffix_idx]}{number:03d}"

def save_session_data(user_id: int, session_data: dict, score: float):
    """Guarda los datos de la sesi√≥n para research futuro."""
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
        else:
            data = {"sessions": [], "high_score_targets": []}
        
        session_record = {
            "timestamp": datetime.now().isoformat(),
            "user_pseudonym": get_user_pseudonym(user_id),
            "coordinates": session_data.get("target_ref", "unknown"),
            "target_name": session_data.get("target", {}).get("name", "unknown"),
            "target_url": session_data.get("target", {}).get("url", ""),
            "score": score,
            "phases": {
                "gestalt": session_data.get("fase1", ""),
                "sensorial": session_data.get("fase2", ""),
                "conceptual": session_data.get("fase4", ""),
            }
        }
        
        data["sessions"].append(session_record)
        
        if score > 7.0:
            target_exists = any(t["url"] == session_record["target_url"] for t in data["high_score_targets"])
            if not target_exists:
                data["high_score_targets"].append({
                    "name": session_record["target_name"],
                    "url": session_record["target_url"],
                    "average_score": score,
                    "success_count": 1
                })
            else:
                for target in data["high_score_targets"]:
                    if target["url"] == session_record["target_url"]:
                        target["success_count"] += 1
                        target["average_score"] = (target["average_score"] + score) / 2
                        break
        
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
            
        logger.info(f"Datos de sesi√≥n guardados para {get_user_pseudonym(user_id)}")
        
    except Exception as e:
        logger.error(f"Error guardando datos de sesi√≥n: {e}")

# --- 5. FUNCIONES DE UTILIDAD PARA IM√ÅGENES ---
def validate_image_url_basic(url: str) -> bool:
    """Validaci√≥n b√°sica mejorada de URL de imagen."""
    if not url or not isinstance(url, str):
        return False
    
    if not url.startswith(('http://', 'https://')):
        return False
    
    url_lower = url.lower()
    
    image_extensions = ['.jpg', '.jpeg', '.png', '.webp', '.gif', '.svg']
    has_image_ext = any(ext in url_lower for ext in image_extensions)
    
    trusted_domains = [
        'unsplash.com', 'pixabay.com', 'pexels.com', 'wikimedia.org',
        'flickr.com', 'imgur.com', 'cloudinary.com', 'amazonaws.com'
    ]
    is_trusted_domain = any(domain in url_lower for domain in trusted_domains)
    
    forbidden_patterns = [
        'profile', 'avatar', 'user', 'people', 'person', 'face',
        'social', 'facebook', 'instagram', 'twitter', 'selfie'
    ]
    has_forbidden = any(pattern in url_lower for pattern in forbidden_patterns)
    
    return (has_image_ext or is_trusted_domain) and not has_forbidden

async def validate_image_content_with_llm(image_url: str) -> bool:
    """Valida que el contenido de una imagen sea apropiado usando Mistral Vision."""
    if not openrouter_client:
        return True
    
    try:
        response = await asyncio.to_thread(requests.get, image_url, timeout=10)
        if response.status_code != 200:
            return False
            
        image_b64 = base64.b64encode(response.content).decode('utf-8')
        
        validation_prompt = """Analiza esta imagen y determina si es apropiada para percepci√≥n remota.

CRITERIOS DE APROBACI√ìN:
‚úÖ Paisajes naturales, arquitectura hist√≥rica, monumentos, jardines
‚úÖ Lugares p√∫blicos sin personas visibles
‚úÖ Estructuras, edificios, formaciones naturales

CRITERIOS DE RECHAZO:
‚ùå Personas, rostros, cuerpos humanos (incluso parciales)
‚ùå Contenido violento, traum√°tico o controvertido
‚ùå Lugares de guerra, desastres, accidentes
‚ùå Contenido privado o inapropiado

Responde √öNICAMENTE con "APROPIADA" o "RECHAZADA"."""

        response = await asyncio.to_thread(
            openrouter_client.chat.completions.create,
            model=MISTRAL_CLOUD_MODEL_ID,
            messages=[{
                "role": "user",
                "content": [
                    {"type": "text", "text": validation_prompt},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_b64}"}}
                ]
            }],
            temperature=0.1,
            max_tokens=10
        )
        
        result = response.choices[0].message.content.strip().upper()
        is_appropriate = "APROPIADA" in result
        
        logger.info(f"Validaci√≥n de imagen: {result} ({'‚úÖ' if is_appropriate else '‚ùå'})")
        return is_appropriate
        
    except Exception as e:
        logger.error(f"Error validando contenido de imagen: {e}")
        return False

def get_fallback_target() -> Dict[str, str]:
    """Objetivos de emergencia completamente seguros y espec√≠ficos."""
    emergency_targets = [
        {
            "name": "Templo de Piedra Ancestral",
            "url": "https://images.unsplash.com/photo-1520637836862-4d197d17c93a?w=800&h=600&fit=crop",
            "description": "Templo de piedra ancestral con arquitectura hist√≥rica - objetivo de emergencia validado",
            "validation_description": "Estructura de piedra antigua con columnas y escalinatas"
        },
        {
            "name": "Lago de Monta√±a Sereno",
            "url": "https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=800&h=600&fit=crop",
            "description": "Lago cristalino en valle monta√±oso con reflejos naturales - objetivo de emergencia validado",
            "validation_description": "Cuerpo de agua transparente rodeado de monta√±as y vegetaci√≥n"
        },
        {
            "name": "Faro Hist√≥rico Costero",
            "url": "https://images.unsplash.com/photo-1507525428034-b723cf961d3e?w=800&h=600&fit=crop",
            "description": "Faro de piedra hist√≥rico en acantilado costero - objetivo de emergencia validado",
            "validation_description": "Torre cil√≠ndrica de piedra blanca sobre formaci√≥n rocosa costera"
        },
        {
            "name": "Puente de Arco de Piedra",
            "url": "https://images.unsplash.com/photo-1516026672322-bc52d61a55d5?w=800&h=600&fit=crop",
            "description": "Puente hist√≥rico de arco de piedra sobre r√≠o - objetivo de emergencia validado",
            "validation_description": "Estructura arqueada de piedra gris con soportes cil√≠ndricos"
        }
    ]
    
    selected = random.choice(emergency_targets)
    logger.info(f"üõ°Ô∏è Usando objetivo de emergencia: {selected['name']}")
    return selected

# --- 6. GENERACI√ìN INTELIGENTE DE T√âRMINOS CON LLM ---
async def generate_search_term_with_llm() -> str:
    """Usa Mistral para generar t√©rminos de b√∫squeda √©ticos y seguros de manera inteligente."""
    if not openrouter_client:
        fallback_terms = [
            "ancient stone bridge peaceful landscape",
            "historic lighthouse coastal scenery",
            "traditional wooden temple garden",
            "serene mountain lake reflection",
            "classical marble fountain courtyard"
        ]
        return random.choice(fallback_terms)
    
    try:
        logger.info("Generando t√©rmino de b√∫squeda con Mistral...")
        
        system_prompt = """Eres un especialista en percepci√≥n remota y selecci√≥n √©tica de objetivos. Tu tarea es generar t√©rminos de b√∫squeda √∫nicos y seguros para encontrar im√°genes apropiadas para sesiones de percepci√≥n remota controlada."""
        
        user_prompt = """Genera un t√©rmino de b√∫squeda √∫nico y espec√≠fico para encontrar una imagen √©tica apropiada para percepci√≥n remota.

**CRITERIOS OBLIGATORIOS DE SEGURIDAD:**
‚Ä¢ SOLO lugares, arquitectura, paisajes naturales, monumentos hist√≥ricos
‚Ä¢ NUNCA personas, rostros, cuerpos humanos, multitudes
‚Ä¢ NUNCA contenido violento, traum√°tico, controvertido o perturbador
‚Ä¢ NUNCA sitios de guerra, desastres, accidentes, cementerios
‚Ä¢ NUNCA contenido religioso controvertido o s√≠mbolos polarizantes
‚Ä¢ NUNCA ubicaciones privadas o con posibles problemas de privacidad

**TIPOS APROPIADOS (elige uno):**
1. **Arquitectura Hist√≥rica:** templos antiguos, catedrales, puentes de piedra, faros, observatorios, bibliotecas cl√°sicas, castillos, monasterios
2. **Paisajes Naturales:** monta√±as, lagos, cascadas, bosques, valles, praderas, costas rocosas, formaciones geol√≥gicas
3. **Jardines y Espacios:** jardines zen, patios hist√≥ricos, plazas p√∫blicas, fuentes cl√°sicas, laberintos de jard√≠n
4. **Monumentos Culturales:** estatuas (sin personas), obeliscos, arcos triunfales, columnas hist√≥ricas, estructuras astron√≥micas

**INSTRUCCIONES:**
- Genera SOLO el t√©rmino de b√∫squeda (m√°ximo 4-5 palabras en ingl√©s)
- S√© espec√≠fico pero no demasiado restrictivo
- Incluye adjetivos descriptivos que sugieran tranquilidad
- Evita t√©rminos ambiguos que puedan retornar contenido inapropiado
- Cada t√©rmino debe ser √∫nico y creativo
- NO uses comillas ni caracteres especiales

**EJEMPLOS DE BUENOS T√âRMINOS:**
- ancient stone lighthouse peaceful coast
- serene mountain temple garden
- historic marble fountain courtyard
- tranquil forest waterfall scene
- classical observatory dome architecture

**FORMATO DE RESPUESTA:**
Responde √öNICAMENTE con el t√©rmino de b√∫squeda sin comillas, sin explicaciones adicionales.

Genera ahora un t√©rmino √∫nico y seguro:"""

        response = await asyncio.to_thread(
            openrouter_client.chat.completions.create,
            model=MISTRAL_CLOUD_MODEL_ID,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.8,
            max_tokens=50
        )
        
        search_term = response.choices[0].message.content.strip()
        search_term = search_term.replace('"', '').replace("'", '').replace('`', '').strip()
        
        forbidden_words = [
            'person', 'people', 'human', 'man', 'woman', 'child', 'face', 'body',
            'war', 'battle', 'death', 'grave', 'cemetery', 'disaster', 'accident',
            'violence', 'blood', 'weapon', 'gun', 'bomb', 'fire', 'destruction'
        ]
        
        search_term_lower = search_term.lower()
        if any(word in search_term_lower for word in forbidden_words):
            logger.warning(f"T√©rmino generado contiene palabras prohibidas: {search_term}")
            return "peaceful ancient stone temple"
        
        if len(search_term.split()) > 6:
            logger.warning(f"T√©rmino generado muy largo: {search_term}")
            search_term = " ".join(search_term.split()[:5])
        
        logger.info(f"T√©rmino de b√∫squeda generado: '{search_term}'")
        return search_term
        
    except Exception as e:
        logger.error(f"Error generando t√©rmino con LLM: {e}")
        return "ancient peaceful stone temple"

# --- 7. FUNCIONES DE B√öSQUEDA DE IM√ÅGENES ---
async def search_duckduckgo_images_real(query: str, max_results: int = 5) -> List[str]:
    """Busca im√°genes usando la librer√≠a duckduckgo_search."""
    try:
        from duckduckgo_search import DDGS
        import time
        
        logger.info(f"Buscando im√°genes con DDGS para: '{query}'")
        
        def search_images():
            results = []
            try:
                with DDGS() as ddgs:
                    search_params = {
                        "keywords": query,
                        "region": "us-en",
                        "safesearch": "On",
                        "size": "Medium",
                        "type_image": None,
                        "layout": None,
                        "license_image": None,
                        "max_results": max_results * 3
                    }
                    
                    for r in ddgs.images(**search_params):
                        try:
                            image_url = r.get("image")
                            if image_url and validate_image_url_basic(image_url):
                                url_lower = image_url.lower()
                                forbidden_url_parts = ['person', 'people', 'face', 'human', 'man', 'woman']
                                if not any(part in url_lower for part in forbidden_url_parts):
                                    results.append(image_url)
                                    logger.debug(f"URL v√°lida encontrada: {image_url[:100]}...")
                                    
                                    if len(results) >= max_results:
                                        break
                            
                            time.sleep(0.1)
                            
                        except Exception as e:
                            logger.debug(f"Error procesando resultado individual: {e}")
                            continue
                            
            except Exception as e:
                logger.error(f"Error en b√∫squeda DDGS detallado: {e}")
                
            return results
        
        image_urls = await asyncio.to_thread(search_images)
        logger.info(f"DDGS encontr√≥ {len(image_urls)} im√°genes v√°lidas")
        return image_urls
        
    except ImportError:
        logger.error("Librer√≠a duckduckgo_search no instalada")
        return []
    except Exception as e:
        logger.error(f"Error general en DDGS: {e}")
        return []

async def search_duckduckgo_images_fallback(query: str, max_results: int = 5) -> List[str]:
    """Fallback mejorado con web scraping."""
    try:
        logger.info(f"Usando fallback de web scraping para: '{query}'")
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none',
            'Cache-Control': 'max-age=0',
            'DNT': '1'
        }
        
        search_url = f"https://duckduckgo.com/?q={query.replace(' ', '+')}&t=h_&iax=images&ia=images&safe=strict"
        
        response = await asyncio.to_thread(requests.get, search_url, headers=headers, timeout=20)
        response.raise_for_status()
        
        logger.debug(f"Respuesta HTTP: {response.status_code}, Tama√±o: {len(response.content)} bytes")
        
        soup = BeautifulSoup(response.content, 'html.parser')
        image_urls = []
        
        img_tags = soup.find_all('img', src=True)
        for img in img_tags:
            src = img.get('src')
            if src and validate_image_url_basic(src) and 'http' in src:
                if len(image_urls) < max_results:
                    image_urls.append(src)
                    logger.debug(f"Imagen encontrada (directa): {src[:100]}...")
        
        if len(image_urls) < max_results:
            data_attrs = ['data-src', 'data-original', 'data-lazy', 'data-image']
            for attr in data_attrs:
                elements = soup.find_all(attrs={attr: True})
                for element in elements:
                    url = element.get(attr)
                    if url and validate_image_url_basic(url) and 'http' in url:
                        if len(image_urls) < max_results:
                            image_urls.append(url)
                            logger.debug(f"Imagen encontrada ({attr}): {url[:100]}...")
        
        if len(image_urls) < max_results:
            json_urls = extract_images_from_scripts(soup)
            for url in json_urls:
                if validate_image_url_basic(url):
                    if len(image_urls) < max_results:
                        image_urls.append(url)
                        logger.debug(f"Imagen encontrada (JSON): {url[:100]}...")
        
        if not image_urls:
            logger.info("No se encontraron im√°genes, probando t√©rminos alternativos")
            simple_terms = query.split()[:2]
            simple_query = " ".join(simple_terms)
            
            if simple_query != query:
                return await search_unsplash_alternative(simple_query, max_results)
        
        logger.info(f"Web scraping encontr√≥ {len(image_urls)} im√°genes v√°lidas")
        return image_urls
        
    except Exception as e:
        logger.error(f"Error en fallback de web scraping: {e}")
        return []

def extract_images_from_scripts(soup) -> List[str]:
    """Extrae URLs de im√°genes desde scripts JSON mejorado."""
    urls = []
    try:
        scripts = soup.find_all('script')
        for script in scripts:
            if script.string and 'http' in script.string:
                patterns = [
                    r'https?://[^\s"\'<>]+\.(?:jpg|jpeg|png|webp|gif|svg)(?:\?[^\s"\'<>]*)?',
                    r'"image":\s*"(https?://[^\s"\'<>]+)"',
                    r'"url":\s*"(https?://[^\s"\'<>]+\.(?:jpg|jpeg|png|webp|gif))"',
                    r'"src":\s*"(https?://[^\s"\'<>]+\.(?:jpg|jpeg|png|webp|gif))"'
                ]
                
                for pattern in patterns:
                    matches = re.findall(pattern, script.string, re.IGNORECASE)
                    for match in matches:
                        url = match if isinstance(match, str) else match[0] if isinstance(match, tuple) else str(match)
                        if validate_image_url_basic(url):
                            urls.append(url)
                            
    except Exception as e:
        logger.debug(f"Error extrayendo de scripts: {e}")
    return urls

async def search_unsplash_alternative(query: str, max_results: int = 5) -> List[str]:
    """B√∫squeda alternativa usando Unsplash como √∫ltimo recurso."""
    try:
        logger.info(f"Usando Unsplash como alternativa para: '{query}'")
        
        unsplash_alternatives = {
            'ancient temple': 'https://images.unsplash.com/photo-1520637836862-4d197d17c93a?w=800&h=600&fit=crop',
            'stone bridge': 'https://images.unsplash.com/photo-1516026672322-bc52d61a55d5?w=800&h=600&fit=crop',
            'historic bridge': 'https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=800&h=600&fit=crop',
            'lighthouse': 'https://images.unsplash.com/photo-1507525428034-b723cf961d3e?w=800&h=600&fit=crop',
            'mountain lake': 'https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=800&h=600&fit=crop',
            'waterfall': 'https://images.unsplash.com/photo-1447752875215-b2761acb3c5d?w=800&h=600&fit=crop',
            'garden': 'https://images.unsplash.com/photo-1547036967-23d11aacaee0?w=800&h=600&fit=crop',
            'fountain': 'https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?w=800&h=600&fit=crop',
            'cathedral': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop',
            'castle': 'https://images.unsplash.com/photo-1464822759844-d150baec0494?w=800&h=600&fit=crop'
        }
        
        query_lower = query.lower()
        for key, url in unsplash_alternatives.items():
            if key in query_lower:
                logger.info(f"Encontrada alternativa de Unsplash para '{key}': {url}")
                return [url]
        
        default_urls = list(unsplash_alternatives.values())
        return [random.choice(default_urls)]
        
    except Exception as e:
        logger.error(f"Error en b√∫squeda alternativa de Unsplash: {e}")
        return []

async def search_duckduckgo_images(query: str, max_results: int = 5) -> List[str]:
    """Funci√≥n principal que coordina todas las estrategias de b√∫squeda de im√°genes."""
    logger.info(f"Iniciando b√∫squeda de im√°genes para: '{query}'")
    
    results = await search_duckduckgo_images_real(query, max_results)
    if results:
        logger.info(f"‚úÖ DDGS exitoso: {len(results)} im√°genes")
        return results
    
    logger.info("DDGS fall√≥, intentando web scraping...")
    results = await search_duckduckgo_images_fallback(query, max_results)
    if results:
        logger.info(f"‚úÖ Web scraping exitoso: {len(results)} im√°genes")
        return results
    
    if len(query.split()) > 2:
        simple_query = " ".join(query.split()[:2])
        logger.info(f"Probando t√©rminos simplificados: '{simple_query}'")
        
        results = await search_duckduckgo_images_real(simple_query, max_results)
        if results:
            logger.info(f"‚úÖ T√©rminos simplificados exitoso: {len(results)} im√°genes")
            return results
    
    logger.info("Todas las b√∫squedas fallaron, usando Unsplash alternativo...")
    results = await search_unsplash_alternative(query, max_results)
    if results:
        logger.info(f"‚úÖ Unsplash alternativo exitoso: {len(results)} im√°genes")
        return results
    
    logger.warning("Todas las estrategias de b√∫squeda fallaron")
    return []

async def select_ethical_target_dynamic() -> Dict[str, str]:
    """Selecciona un objetivo √©tico usando LLM para generar t√©rminos de b√∫squeda."""
    max_attempts = 3
    
    for attempt in range(max_attempts):
        try:
            logger.info(f"Intento {attempt + 1} de selecci√≥n de objetivo")
            
            search_term = await generate_search_term_with_llm()
            image_urls = await search_duckduckgo_images(search_term)
            
            for url in image_urls:
                if await validate_image_content_with_llm(url):
                    target_name = " ".join(word.capitalize() for word in search_term.split()[:3])
                    
                    target = {
                        "name": target_name,
                        "url": url,
                        "description": f"Objetivo generado din√°micamente: {search_term}",
                        "search_term": search_term,
                        "generation_method": "llm_dynamic"
                    }
                    
                    logger.info(f"‚úÖ Objetivo din√°mico seleccionado: {target_name}")
                    return target
            
            logger.warning(f"Intento {attempt + 1}: No se encontraron im√°genes v√°lidas para '{search_term}'")
            
        except Exception as e:
            logger.error(f"Error en intento {attempt + 1}: {e}")
    
    logger.warning("Todos los intentos fallaron, usando objetivo de emergencia")
    return get_fallback_target()

# --- 8. FUNCIONES DE FORMATEO ---
def format_analysis_for_telegram(analysis_text: str) -> str:
    """Convierte el an√°lisis en formato limpio para Telegram usando HTML."""
    lines = analysis_text.split('\n')
    formatted_lines = []
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        if line.startswith('# '):
            formatted_lines.append(f"\nüîπ <b>{line[2:].strip()}</b>\n")
        elif line.startswith('## '):
            formatted_lines.append(f"\nüìã <b>{line[3:].strip()}</b>")
        elif line.startswith('### '):
            formatted_lines.append(f"\n‚Ä¢ <b>{line[4:].strip()}</b>")
        elif line.startswith('- ') or line.startswith('‚Ä¢ '):
            formatted_lines.append(f"  ‚Ä¢ {line[2:].strip()}")
        elif '**' in line:
            line = line.replace('**', '')
            formatted_lines.append(f"<b>{line}</b>")
        else:
            formatted_lines.append(line)
    
    result = '\n'.join(formatted_lines)
    
    result = result.replace('*', '')
    result = result.replace('#', '')
    result = result.replace('`', '')
    result = result.replace('[', '')
    result = result.replace(']', '')
    result = result.replace('(', '')
    result = result.replace(')', '')
    
    return result

def extract_score_from_analysis(analysis_text: str) -> float:
    """Extrae la puntuaci√≥n num√©rica del an√°lisis."""
    try:
        score_patterns = [
            r'(\d+\.?\d*)/10',
            r'Puntuaci√≥n.*?(\d+\.?\d*)',
            r'Score.*?(\d+\.?\d*)',
            r'(\d+\.?\d*)\s*/\s*10'
        ]
        
        for pattern in score_patterns:
            match = re.search(pattern, analysis_text, re.IGNORECASE)
            if match:
                score = float(match.group(1))
                return min(score, 10.0)
        
        return 5.0
        
    except:
        return 5.0

# --- 9. MODELOS PYDANTIC ---
class DrawingSubmission(BaseModel):
    imageData: str
    userId: int
    targetCoordinates: Optional[str] = None

class APIResponse(BaseModel):
    status: str
    message: Optional[str] = None

# --- 10. SERVIDOR API (FastAPI) ---
app_fastapi = FastAPI(title="Protocolo Nautilus API", version="3.2.0")
app_fastapi.add_middleware(CORSMiddleware, allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"])

@app_fastapi.post("/submit_drawing", response_model=APIResponse)
async def submit_drawing(submission: DrawingSubmission):
    user_id = submission.userId
    logger.info(f"Recibiendo dibujo de usuario {user_id} con coordenadas: {submission.targetCoordinates}")
    
    if not telegram_app: 
        raise HTTPException(status_code=503, detail="Servicio Telegram no inicializado")
    if user_id not in user_sessions: 
        raise HTTPException(status_code=404, detail="No hay sesi√≥n activa")
    
    chat_id = user_sessions[user_id].get("chat_id")
    if not chat_id: 
        raise HTTPException(status_code=404, detail="No se encontr√≥ chat_id")
    
    try:
        header, encoded = submission.imageData.split(",", 1)
        image_data = base64.b64decode(encoded)
        if not image_data: 
            raise ValueError("Imagen vac√≠a")
        
        user_sessions[user_id]["session_data"]["fase3_boceto_bytes"] = image_data
        
        logger.info(f"Iniciando an√°lisis inmediato del boceto para usuario {user_id}")
        sketch_desc = await describe_sketch_with_mistral(image_data)
        user_sessions[user_id]["session_data"]["sketch_description"] = sketch_desc
        logger.info(f"An√°lisis del boceto completado para usuario {user_id}")
        
        target_ref = user_sessions[user_id]["session_data"].get("target_ref", "????-????")
        
        await telegram_app.bot.send_photo(
            chat_id=chat_id, 
            photo=image_data, 
            caption="üé® <b>Boceto recibido y procesado</b>", 
            parse_mode='HTML'
        )
        
        await telegram_app.bot.send_message(
            chat_id=chat_id, 
            text=f"¬°Excelente!\n\n<b>FASE 4: DATOS CONCEPTUALES</b>\n<b>Coordenadas del objetivo:</b> <code>{target_ref}</code>\n\nAhora describe las <b>cualidades intangibles</b> y <b>conceptos abstractos</b> que percibes. Estas impresiones pueden incluir:\n\n‚Ä¢ Sensaciones emocionales\n‚Ä¢ Prop√≥sito o funci√≥n\n‚Ä¢ Atm√≥sfera o energ√≠a\n‚Ä¢ Significado simb√≥lico\n‚Ä¢ Contexto temporal o cultural\n\n<i>Recuerda: las impresiones son sutiles y pueden parecer como \"recuerdos descoloridos\". Conf√≠a en tus primeras intuiciones.</i>", 
            parse_mode='HTML'
        )
        
        return APIResponse(status="ok")
        
    except Exception as e:
        logger.error(f"Error en submit_drawing para {user_id}: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))

# --- 11. FUNCIONES DE IA ESPECIALIZADAS ---
def describe_objective_with_blip(image_bytes: bytes) -> str:
    if not blip_model: 
        return "Modelo de visi√≥n local no disponible."
    try:
        logger.info("Describiendo OBJETIVO con BLIP local...")
        raw_image = Image.open(BytesIO(image_bytes)).convert('RGB')
        device = "cuda" if torch.cuda.is_available() else "cpu"
        inputs = blip_processor(raw_image, return_tensors="pt").to(device)
        out = blip_model.generate(**inputs, max_new_tokens=75)
        caption = blip_processor.decode(out[0], skip_special_tokens=True)
        return caption
    except Exception as e:
        logger.error(f"Error al describir OBJETIVO con BLIP: {e}")
        return "Error al procesar la imagen objetivo."

async def describe_sketch_with_mistral(image_bytes: bytes) -> str:
    if not openrouter_client: 
        return "Modelo de visi√≥n en la nube no disponible."
    try:
        logger.info("Describiendo BOCETO con Mistral en la nube...")
        b64_image = base64.b64encode(image_bytes).decode('utf-8')
        prompt_text = """Analiza este boceto de percepci√≥n remota de manera objetiva y detallada. 

Describe espec√≠ficamente:
- Formas y l√≠neas principales
- Composici√≥n y distribuci√≥n espacial  
- Elementos estructurales identificables
- Patrones o texturas sugeridas
- Proporciones y relaciones entre elementos
- Cualquier detalle t√©cnico o arquitect√≥nico aparente

S√© conciso pero exhaustivo en la descripci√≥n visual."""
        
        response = await asyncio.to_thread(
            openrouter_client.chat.completions.create, 
            model=MISTRAL_CLOUD_MODEL_ID, 
            messages=[{
                "role": "user", 
                "content": [
                    {"type": "text", "text": prompt_text}, 
                    {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{b64_image}"}}
                ]
            }],
            temperature=0.2,
            max_tokens=600
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"Error al describir BOCETO con Mistral: {e}")
        return "Error al procesar el boceto."

async def get_professional_analysis_with_mistral(user_transcript: str, target_desc: str, sketch_desc: str, target_name: str, coordinates: str) -> str:
    if not openrouter_client: 
        return "An√°lisis de texto no disponible."
    
    logger.info("Generando an√°lisis profesional con Mistral...")
    
    system_prompt = """Eres un Analista Senior de Percepci√≥n Remota con experiencia en protocolos cient√≠ficos est√°ndar. 
Tu evaluaci√≥n debe ser profesional, constructiva y basada en criterios establecidos de correlaci√≥n en percepci√≥n remota.
Usa terminolog√≠a apropiada del campo y mant√©n un tono alentador pero riguroso.
IMPORTANTE: Debes incluir una puntuaci√≥n num√©rica final en formato "X.X/10.0" al final del an√°lisis."""
    
    user_prompt = f"""AN√ÅLISIS DE SESI√ìN DE PERCEPCI√ìN REMOTA

**COORDENADAS DEL OBJETIVO:** {coordinates}
**OBJETIVO REAL:** {target_name}

**DATOS DEL PERCEPTOR:**
---
{user_transcript}
---

**AN√ÅLISIS DETALLADO DEL BOCETO (IA Visual):**
---
{sketch_desc}
---

**DESCRIPCI√ìN DEL OBJETIVO REAL (IA BLIP):**
---
{target_desc}
---

**INSTRUCCIONES PARA EL AN√ÅLISIS:**

Genera un informe profesional en Markdown siguiendo la estructura est√°ndar de evaluaci√≥n:

## üìã Resumen Ejecutivo
- Evaluaci√≥n general de la precisi√≥n de la sesi√≥n
- Puntuaci√≥n preliminar y justificaci√≥n metodol√≥gica

## üé® An√°lisis del Boceto
### Descripci√≥n T√©cnica
- An√°lisis detallado de lo que la IA detect√≥ en el dibujo
- Elementos estructurales y compositivos identificados
- Caracter√≠sticas t√©cnicas y proporciones

### Interpretaci√≥n Perceptual
- Correlaci√≥n entre elementos dibujados y objetivo real
- An√°lisis de la traducci√≥n subconsciente de datos

## üìä Correlaciones Identificadas
### Correspondencias Directas
- Elementos espec√≠ficos que coinciden exactamente
- Detalles estructurales alineados
- Caracter√≠sticas f√≠sicas acertadas

### Correspondencias Conceptuales
- Temas y conceptos abstractos que coinciden
- Impresiones atmosf√©ricas correctas
- Datos intangibles acertados

### Correspondencias Sensoriales
- Datos t√°ctiles, dimensionales y texturales correctos
- Informaci√≥n sobre densidad, masa y escala

## üéØ Elementos √önicos del Perceptor
- Datos proporcionados que no aparecen en descripciones de referencia
- Interpretaci√≥n de estos elementos √∫nicos
- Posible significado o relevancia

## ‚ö†Ô∏è Discrepancias y Desviaciones
- Elementos que no corresponden al objetivo
- Posibles interpretaciones alternativas
- An√°lisis de ruido vs. datos v√°lidos

## üìà Evaluaci√≥n Cuantitativa
**Escala de Precisi√≥n: 1.0 - 10.0**
- **Puntuaci√≥n Final:** [X.X/10.0]
- **Justificaci√≥n Metodol√≥gica:** Explicaci√≥n detallada de la calificaci√≥n
- **Criterios de Evaluaci√≥n:** Factores considerados en la puntuaci√≥n

## üí° Retroalimentaci√≥n Constructiva
- Fortalezas identificadas en la sesi√≥n
- √Åreas de mejora para futuras sesiones
- Recomendaciones espec√≠ficas para el desarrollo

**NOTA:** Mant√©n un enfoque cient√≠fico y objetivo, reconociendo que la percepci√≥n remota implica datos sutiles y a menudo fragmentarios."""

    try:
        response = await asyncio.to_thread(
            openrouter_client.chat.completions.create, 
            model=MISTRAL_CLOUD_MODEL_ID, 
            messages=[
                {"role": "system", "content": system_prompt}, 
                {"role": "user", "content": user_prompt}
            ], 
            temperature=0.3, 
            max_tokens=3000
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"Error generando an√°lisis profesional con Mistral: {e}")
        return "Error: El servicio de an√°lisis profesional no est√° disponible."

# --- 12. HANDLERS DE TELEGRAM ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    user_id = user.id
    
    session_start_times[user_id] = datetime.now()
    user_sessions[user_id] = {"chat_id": update.effective_chat.id, "session_data": {}}
    
    protocol_message = f"""üß† <b>PROTOCOLO NAUTILUS v3.2</b>
<i>Sistema de Percepci√≥n Remota Controlada con Ranking</i>

Hola {user.mention_html()}, bienvenido al sistema m√°s avanzado de percepci√≥n remota.

<b>üî¨ ¬øQU√â HAREMOS?</b>
Participar√°s en una sesi√≥n cient√≠fica de 4 fases donde percibir√°s informaci√≥n sobre un objetivo remoto usando solo sus coordenadas num√©ricas.

<b>üõ°Ô∏è MEDIDAS DE SEGURIDAD</b>
‚Ä¢ Solo objetivos √©ticos: arquitectura hist√≥rica, paisajes naturales, arte
‚Ä¢ Sin contenido traum√°tico, violento o controvertido
‚Ä¢ B√∫squeda autom√°tica con filtros de seguridad
‚Ä¢ Protecci√≥n de identidad con pseud√≥nimos

<b>‚öóÔ∏è C√ìMO FUNCIONA</b>
‚Ä¢ <b>IA de B√∫squeda:</b> Selecciona objetivos seguros en tiempo real
‚Ä¢ <b>IA de An√°lisis:</b> Eval√∫a tu boceto objetivamente  
‚Ä¢ <b>IA de Correlaci√≥n:</b> Compara tus datos con el objetivo real

<b>üèÜ SISTEMA DE RANKING</b>
‚Ä¢ Puntos por precisi√≥n, detalles, tiempo y calidad
‚Ä¢ Compite con otros perceptores en el ranking global
‚Ä¢ Seguimiento de tu progreso personal

<b>üìä INVESTIGACI√ìN</b>
Tus datos (an√≥nimos) contribuyen a la investigaci√≥n sobre percepci√≥n remota. Tu pseud√≥nimo: <code>{get_user_pseudonym(user.id)}</code>

<b>‚è≥ PREPARANDO OBJETIVO...</b>
<i>Buscando objetivo √©tico usando DuckDuckGo...</i>"""

    await update.message.reply_html(protocol_message)
    
    try:
        target_ref = generate_professional_coordinates()
        selected_target = await select_ethical_target_dynamic()
        
        user_sessions[user.id]["session_data"]["target"] = selected_target
        user_sessions[user.id]["session_data"]["target_ref"] = target_ref
        
        logger.info(f"Usuario {user.id} ({user.first_name}) inici√≥ sesi√≥n. Objetivo: {selected_target['name']}, Coordenadas: {target_ref}")
        
        success_message = f"""‚úÖ <b>OBJETIVO SELECCIONADO</b>

<b>Coordenadas asignadas:</b> <code>{target_ref}</code>

<b>FASE 1: IMPRESIONES GESTALT</b>
Describe tus <b>primeras impresiones</b> sobre el objetivo:

‚Ä¢ Sensaciones t√°ctiles (rugoso, suave, fr√≠o, c√°lido)
‚Ä¢ Impresiones dimensionales (grande, peque√±o, alto, ancho)  
‚Ä¢ Datos primitivos de forma o estructura

<i>Las impresiones son sutiles como \"recuerdos descoloridos\". Conf√≠a en tus primeras intuiciones.</i>"""
        
        await update.message.reply_html(success_message)
        
    except Exception as e:
        logger.error(f"Error en b√∫squeda de objetivo: {e}")
        target_ref = generate_professional_coordinates()
        selected_target = get_fallback_target()
        user_sessions[user.id]["session_data"]["target"] = selected_target
        user_sessions[user.id]["session_data"]["target_ref"] = target_ref
        
        fallback_message = f"""‚úÖ <b>OBJETIVO SELECCIONADO</b> (Fallback)

<b>Coordenadas asignadas:</b> <code>{target_ref}</code>

<b>FASE 1: IMPRESIONES GESTALT</b>
Describe tus <b>primeras impresiones</b> sobre el objetivo:

‚Ä¢ Sensaciones t√°ctiles
‚Ä¢ Impresiones dimensionales  
‚Ä¢ Datos primitivos de forma

<i>Conf√≠a en tus primeras intuiciones.</i>"""
        
        await update.message.reply_html(fallback_message)
    
    return FASE_1_GESTALT

async def fase_1_gestalt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    target_ref = user_sessions[user_id]["session_data"]["target_ref"]
    
    user_sessions[user_id]["session_data"]["fase1"] = update.message.text
    
    await update.message.reply_html(
        f"‚úÖ <b>Impresiones Gestalt registradas</b>\n\n"
        f"<b>FASE 2: DATOS SENSORIALES</b>\n"
        f"<b>Coordenadas del objetivo:</b> <code>{target_ref}</code>\n\n"
        f"Describe datos sensoriales m√°s espec√≠ficos:\n\n"
        f"‚Ä¢ <b>Colores:</b> Tonalidades o matices percibidos\n"
        f"‚Ä¢ <b>Texturas:</b> Caracter√≠sticas de superficie\n"
        f"‚Ä¢ <b>Sonidos:</b> Impresiones auditivas\n"
        f"‚Ä¢ <b>Densidad/Masa:</b> Sensaci√≥n de peso o solidez\n"
        f"‚Ä¢ <b>Temperatura:</b> Sensaciones t√©rmicas\n\n"
        f"<i>Los datos pueden acumularse gradualmente. Reporta lo que percibas sin forzar.</i>"
    )
    return FASE_2_SENSORIAL

async def fase_2_sensorial(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    target_ref = user_sessions[user_id]["session_data"]["target_ref"]
    
    user_sessions[user_id]["session_data"]["fase2"] = update.message.text
    
    webapp_url = f"{CANVAS_URL}?target={target_ref}"
    
    keyboard = [[InlineKeyboardButton("üé® Abrir Canvas de Percepci√≥n", web_app=WebAppInfo(url=webapp_url))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_html(
        f"‚úÖ <b>Datos sensoriales registrados</b>\n\n"
        f"<b>FASE 3: BOCETO PERCEPTUAL</b>\n"
        f"<b>Coordenadas del objetivo:</b> <code>{target_ref}</code>\n\n"
        f"Ahora traduce tus impresiones en un <b>boceto</b>. Este dibujo debe:\n\n"
        f"‚Ä¢ Representar las formas e impresiones percibidas\n"
        f"‚Ä¢ Mostrar relaciones espaciales b√°sicas\n"
        f"‚Ä¢ Incluir elementos estructurales intuidos\n\n"
        f"<i>No busques perfecci√≥n art√≠stica. El boceto es una herramienta de traducci√≥n de datos perceptuales.</i>", 
        reply_markup=reply_markup
    )
    return FASE_3_BOCETO

async def fase_4_conceptual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    target_ref = user_sessions[user_id]["session_data"]["target_ref"]
    
    user_sessions[user_id]["session_data"]["fase4"] = update.message.text
    
    await update.message.reply_html(
        f"‚úÖ <b>Datos conceptuales registrados</b>\n\n"
        f"üéØ <b>Sesi√≥n de Percepci√≥n Remota Completada</b>\n"
        f"<b>Coordenadas finales:</b> <code>{target_ref}</code>\n\n"
        f"<b>Datos recopilados:</b>\n"
        f"‚Ä¢ Impresiones Gestalt ‚úÖ\n"
        f"‚Ä¢ Datos Sensoriales ‚úÖ\n"
        f"‚Ä¢ Boceto Perceptual ‚úÖ\n"
        f"‚Ä¢ Datos Conceptuales ‚úÖ\n\n"
        f"¬øListo para ver el <b>an√°lisis profesional</b> y el <b>objetivo real</b>?\n\n"
        f"Env√≠a /finalizar para obtener tu evaluaci√≥n completa."
    )
    return FINALIZAR

async def safe_send_photo(bot, chat_id: int, photo_url: str, caption: str, parse_mode: str = 'HTML'):
    """Env√≠a una foto de manera segura con fallback en caso de error."""
    try:
        await bot.send_photo(
            chat_id=chat_id,
            photo=photo_url,
            caption=caption,
            parse_mode=parse_mode
        )
        return True
    except Exception as e:
        logger.error(f"Error enviando foto desde URL {photo_url}: {e}")
        
        # Fallback: intentar descargar y enviar como bytes
        try:
            response = requests.get(photo_url, timeout=10)
            response.raise_for_status()
            
            await bot.send_photo(
                chat_id=chat_id,
                photo=BytesIO(response.content),
                caption=caption,
                parse_mode=parse_mode
            )
            logger.info("‚úÖ Imagen enviada usando fallback con bytes")
            return True
        except Exception as e2:
            logger.error(f"Error en fallback de imagen: {e2}")
            
            # √öltimo fallback: enviar solo el texto sin imagen
            await bot.send_message(
                chat_id=chat_id,
                text=f"üéØ <b>REVELACI√ìN DEL OBJETIVO</b>\n\n{caption}\n\n<i>‚ö†Ô∏è La imagen no pudo ser cargada. URL: {photo_url}</i>",
                parse_mode=parse_mode
            )
            return False

async def finalizar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    if user_id not in user_sessions:
        await update.message.reply_text("‚ùå No se encontr√≥ una sesi√≥n activa. Por favor, /start.")
        return ConversationHandler.END
    
    await update.message.reply_text("‚è≥ <b>Procesando an√°lisis profesional...</b>\n<i>Contactando sistemas de IA Local y en la Nube...</i>", parse_mode='HTML')
    
    session_data = user_sessions[user_id].get("session_data", {})
    target_info = session_data.get("target")
    target_ref = session_data.get("target_ref", "????-????")
    
    if not target_info:
        await update.message.reply_text("‚ùå Error al recuperar objetivo. Por favor, /start.")
        return ConversationHandler.END

    logger.info(f"Usuario {user_id} finaliz√≥. Objetivo: {target_info['name']}, Coordenadas: {target_ref}")
    
    user_transcript = (
        f"FASE 1 - Impresiones Gestalt:\n{session_data.get('fase1', 'N/A')}\n\n"
        f"FASE 2 - Datos Sensoriales:\n{session_data.get('fase2', 'N/A')}\n\n"
        f"FASE 4 - Datos Conceptuales:\n{session_data.get('fase4', 'N/A')}"
    )
    
    # Describir objetivo con BLIP
    try:
        response = requests.get(target_info["url"], timeout=15)
        response.raise_for_status()
        target_desc = describe_objective_with_blip(response.content)
    except Exception as e:
        logger.error(f"No se pudo descargar/describir el objetivo: {e}")
        target_desc = "Error al procesar la imagen objetivo."

    # Obtener descripci√≥n del boceto
    sketch_desc = session_data.get("sketch_description", "El perceptor no proporcion√≥ un boceto.")
    if sketch_desc == "El perceptor no proporcion√≥ un boceto.":
        user_drawing_bytes = session_data.get("fase3_boceto_bytes")
        if user_drawing_bytes:
            sketch_desc = await describe_sketch_with_mistral(user_drawing_bytes)

    # Generar an√°lisis profesional completo
    session_analysis = await get_professional_analysis_with_mistral(
        user_transcript, target_desc, sketch_desc, target_info['name'], target_ref
    )
    
    score = extract_score_from_analysis(session_analysis)
    
    # Sistema de ranking integrado
    user_pseudonym = get_user_pseudonym(user_id)
    total_points = 0
    user_position = "?"
    is_new_record = False
    
    try:
        global nautilus_db
        if nautilus_db:
            session_start_time = session_start_times.get(user_id)
            
            total_points = await nautilus_db.save_session_to_db(
                user_id, user_pseudonym, session_data, score, session_start_time
            )
            
            user_position = nautilus_db.get_user_ranking_position(user_pseudonym)
            
            # Verificar si es un nuevo r√©cord personal
            previous_best = nautilus_db.get_user_best_score(user_pseudonym)
            if previous_best and len(previous_best) > 0:
                is_new_record = total_points > previous_best[0]
            else:
                is_new_record = True  # Primera sesi√≥n es siempre r√©cord
            
            logger.info(f"Usuario {user_pseudonym}: {total_points} puntos, posici√≥n #{user_position}")
            
    except Exception as e:
        logger.error(f"Error en sistema de ranking: {e}")
        total_points = int(score * 100)
    
    # Limpiar tiempo de sesi√≥n
    if user_id in session_start_times:
        del session_start_times[user_id]
    
    # Guardar datos para investigaci√≥n
    save_session_data(user_id, session_data, score)
    
    # Enviar revelaci√≥n del objetivo con manejo seguro de errores
    await safe_send_photo(
        context.bot,
        user_id,
        target_info["url"],
        f"<b>Coordenadas:</b> <code>{target_ref}</code>\n"
        f"<b>Objetivo Real:</b> {target_info['name']}\n\n"
        f"<i>{target_info.get('description', 'Objetivo de percepci√≥n remota controlada')}</i>"
    )
    
    # Enviar an√°lisis profesional
    if "Error:" in session_analysis:
        await context.bot.send_message(
            chat_id=user_id, 
            text=f"‚ö†Ô∏è <b>No se pudo generar el an√°lisis profesional</b>\n\n{session_analysis}", 
            parse_mode='HTML'
        )
    else:
        try:
            formatted_analysis = format_analysis_for_telegram(session_analysis)
            
            if len(formatted_analysis) > 4000:
                parts = [formatted_analysis[i:i+4000] for i in range(0, len(formatted_analysis), 4000)]
                for i, part in enumerate(parts):
                    header = f"üìä <b>AN√ÅLISIS PROFESIONAL - Parte {i+1}/{len(parts)}</b>\n\n" if i == 0 else ""
                    await context.bot.send_message(
                        chat_id=user_id, 
                        text=header + part, 
                        parse_mode='HTML'
                    )
                    await asyncio.sleep(1)
            else:
                await context.bot.send_message(
                    chat_id=user_id, 
                    text=f"üìä <b>AN√ÅLISIS PROFESIONAL</b>\n\n{formatted_analysis}", 
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"Error enviando an√°lisis formateado: {e}")
            basic_text = session_analysis.replace('#', '').replace('*', '').replace('`', '')
            await context.bot.send_message(
                chat_id=user_id, 
                text=f"üìä <b>AN√ÅLISIS PROFESIONAL</b>\n\n{basic_text}", 
                parse_mode='HTML'
            )
    
    # Mostrar puntuaci√≥n y ranking
    try:
        if nautilus_db:
            # Obtener desglose de puntos de la base de datos
            user_best = nautilus_db.get_user_best_score(user_pseudonym)
            if user_best:
                detail_bonus = user_best[2]
                time_bonus = user_best[3]
                quality_bonus = user_best[4]
            else:
                detail_bonus = total_points - int(score * 100) - 125  # Estimaci√≥n
                time_bonus = 50  # Default
                quality_bonus = 75  # Default
            
            points_message = f"""üéØ <b>TU PUNTUACI√ìN TOTAL</b>

üîÆ <b>{total_points}</b> puntos obtenidos
üìç <b>Posici√≥n #{user_position}</b> en el ranking global

<b>üìä Desglose de Puntos:</b>
‚Ä¢ Score LLM: <b>{int(score * 100)}</b> pts
‚Ä¢ Bonus Detalles: <b>üì° {detail_bonus}</b> pts  
‚Ä¢ Bonus Tiempo: <b>‚è±Ô∏è {time_bonus}</b> pts
‚Ä¢ Bonus Calidad: <b>üéØ {quality_bonus}</b> pts

{'üèÜ <b>¬°NUEVO R√âCORD PERSONAL!</b>' if is_new_record else 'üìà Sigue entrenando para mejorar tu r√©cord'}"""

            await context.bot.send_message(
                chat_id=user_id,
                text=points_message,
                parse_mode='HTML'
            )
            
            # Mostrar ranking actual (top 5)
            current_rankings = nautilus_db.get_global_ranking(5)
            if current_rankings:
                ranking_message = nautilus_db.format_ranking_message(current_rankings, user_pseudonym)
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text=ranking_message,
                    parse_mode='HTML'
                )
            
            # Estad√≠sticas generales
            stats = nautilus_db.get_ranking_stats()
            stats_message = f"""üìä <b>ESTAD√çSTICAS DEL SISTEMA</b>

üéØ Total de sesiones: <b>{stats['total_sessions']}</b>
üë• Perceptores √∫nicos: <b>{stats['unique_users']}</b>  
üìà Promedio de puntos: <b>{stats['average_points']}</b>
üèÜ R√©cord absoluto: <b>{stats['highest_score']}</b> pts

<i>Cada sesi√≥n mejora la comprensi√≥n cient√≠fica de la percepci√≥n remota.</i>"""
            
            await context.bot.send_message(
                chat_id=user_id,
                text=stats_message,
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"Error mostrando ranking: {e}")
    
    # Mensaje de cierre
    pseudonym = get_user_pseudonym(user_id)
    await update.message.reply_html(
        f"üôè <b>Sesi√≥n Completada</b>\n\n"
        f"Gracias por participar, <b>{pseudonym}</b>!\n"
        f"Tu puntuaci√≥n final: <b>{total_points}</b> puntos\n"
        f"Posici√≥n actual: <b>#{user_position}</b>\n\n"
        f"<b>üéØ Sistema de Entrenamiento:</b>\n"
        f"‚Ä¢ Compite por mejores posiciones en el ranking\n"
        f"‚Ä¢ Mejora tus t√©cnicas de percepci√≥n remota\n"
        f"‚Ä¢ Contribuye a la investigaci√≥n cient√≠fica\n\n"
        f"<i>¬°Entrena regularmente para dominar la percepci√≥n remota!</i>\n\n"
        f"Para una nueva sesi√≥n, env√≠a /start\n"
        f"Ver ranking completo: /ranking"
    )
    
    del user_sessions[user_id]
    return ConversationHandler.END

async def cancelar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    if user_id in user_sessions: 
        del user_sessions[user_id]
    await update.message.reply_text("‚ùå Sesi√≥n cancelada. Env√≠a /start para comenzar una nueva sesi√≥n de percepci√≥n remota.")
    return ConversationHandler.END

# --- 13. COMANDOS ADICIONALES ---
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Proporciona informaci√≥n sobre el protocolo de percepci√≥n remota."""
    info_text = """üß† <b>PROTOCOLO NAUTILUS - Informaci√≥n Detallada</b>

<b>¬øQu√© es la Percepci√≥n Remota?</b>
Es la capacidad de obtener informaci√≥n sobre un objetivo distante usando medios extrasensoriales. No se trata de "ver" el objetivo, sino de percibir datos sutiles.

<b>üî¨ Metodolog√≠a Cient√≠fica:</b>
‚Ä¢ Coordenadas aleatorias generadas autom√°ticamente
‚Ä¢ B√∫squeda de objetivos √©ticos en tiempo real
‚Ä¢ An√°lisis objetivo mediante IA especializada
‚Ä¢ Datos an√≥nimos para investigaci√≥n

<b>üõ°Ô∏è Seguridad Garantizada:</b>
‚Ä¢ Solo lugares hist√≥ricos, arquitectura, paisajes
‚Ä¢ Filtros autom√°ticos contra contenido traum√°tico
‚Ä¢ Protecci√≥n de identidad con pseud√≥nimos

<b>üèÜ Sistema de Puntuaci√≥n:</b>
‚Ä¢ Score base del an√°lisis LLM (100-1000 pts)
‚Ä¢ Bonus por riqueza de detalles (0-200 pts)
‚Ä¢ Bonus por eficiencia temporal (0-100 pts)
‚Ä¢ Bonus por calidad descriptiva (0-100 pts)

<b>üìä Sistema de Research:</b>
‚Ä¢ Cada sesi√≥n contribuye a la base de datos cient√≠fica
‚Ä¢ Objetivos exitosos se identifican autom√°ticamente
‚Ä¢ An√°lisis de patrones de percepci√≥n remota"""
    await update.message.reply_html(info_text)

async def ranking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra el ranking global de mejores puntuaciones."""
    try:
        if not nautilus_db:
            await update.message.reply_text("‚ùå Sistema de ranking no disponible.")
            return
        
        user_pseudonym = get_user_pseudonym(update.effective_user.id)
        rankings = nautilus_db.get_global_ranking(10)
        
        if not rankings:
            await update.message.reply_html("üîÆ <b>RANKING NAUTILUS</b>\n\nA√∫n no hay datos de ranking disponibles.\n¬°S√© el primero en completar una sesi√≥n!")
            return
        
        ranking_message = nautilus_db.format_ranking_message(rankings, user_pseudonym)
        
        # Agregar informaci√≥n personal del usuario
        user_best = nautilus_db.get_user_best_score(user_pseudonym)
        user_position = nautilus_db.get_user_ranking_position(user_pseudonym)
        
        if user_best:
            personal_info = f"\n\nüéØ <b>TU MEJOR PUNTUACI√ìN</b>\nüìç Posici√≥n: #{user_position}\nüîÆ Puntos: {user_best[0]}\nüéØ Objetivo: {user_best[5]} - {user_best[6]}"
            ranking_message += personal_info
        
        await update.message.reply_html(ranking_message)
        
    except Exception as e:
        logger.error(f"Error en comando ranking: {e}")
        await update.message.reply_text("‚ùå Error al obtener el ranking.")

async def mi_ranking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra el historial personal del usuario."""
    try:
        if not nautilus_db:
            await update.message.reply_text("‚ùå Sistema de ranking no disponible.")
            return
        
        user_pseudonym = get_user_pseudonym(update.effective_user.id)
        user_best = nautilus_db.get_user_best_score(user_pseudonym)
        user_position = nautilus_db.get_user_ranking_position(user_pseudonym)
        
        if not user_best:
            await update.message.reply_html(
                f"üë§ <b>TU PERFIL - {user_pseudonym}</b>\n\n"
                f"üéØ A√∫n no has completado ninguna sesi√≥n.\n"
                f"¬°Env√≠a /start para tu primera aventura de percepci√≥n remota!"
            )
            return
        
        profile_message = f"""üë§ <b>TU PERFIL - {user_pseudonym}</b>

üèÜ <b>TU MEJOR PUNTUACI√ìN</b>
üîÆ <b>{user_best[0]}</b> puntos totales
üìç Posici√≥n global: <b>#{user_position}</b>

<b>üìä Desglose de tu mejor sesi√≥n:</b>
‚Ä¢ Score LLM: <b>{int(user_best[1] * 100)}</b> pts
‚Ä¢ Bonus Detalles: <b>üì° {user_best[2]}</b> pts  
‚Ä¢ Bonus Tiempo: <b>‚è±Ô∏è {user_best[3]}</b> pts
‚Ä¢ Bonus Calidad: <b>üéØ {user_best[4]}</b> pts

üéØ <b>Objetivo:</b> {user_best[5]} - {user_best[6]}
üìÖ <b>Fecha:</b> {user_best[7]}

<i>¬°Sigue entrenando para superar tu r√©cord!</i>"""

        await update.message.reply_html(profile_message)
        
    except Exception as e:
        logger.error(f"Error en comando mi_ranking: {e}")
        await update.message.reply_text("‚ùå Error al obtener tu perfil.")

async def estadisticas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra estad√≠sticas del sistema y del usuario."""
    try:
        active_sessions = len(user_sessions)
        user_pseudonym = get_user_pseudonym(update.effective_user.id)
        
        ranking_stats = ""
        if nautilus_db:
            stats = nautilus_db.get_ranking_stats()
            user_best = nautilus_db.get_user_best_score(user_pseudonym)
            user_position = nautilus_db.get_user_ranking_position(user_pseudonym)
            
            if user_best:
                ranking_stats = f"""
<b>üèÜ Tu Rendimiento:</b>
‚Ä¢ Mejor puntuaci√≥n: {user_best[0]} pts
‚Ä¢ Posici√≥n actual: #{user_position}
‚Ä¢ √öltimo objetivo: {user_best[6]}

<b>üìä Estad√≠sticas Globales:</b>
‚Ä¢ Total sesiones: {stats['total_sessions']}
‚Ä¢ Perceptores √∫nicos: {stats['unique_users']}
‚Ä¢ Promedio de puntos: {stats['average_points']}
‚Ä¢ R√©cord absoluto: {stats['highest_score']} pts"""
            else:
                ranking_stats = f"""
<b>üìä Estad√≠sticas Globales:</b>
‚Ä¢ Total sesiones: {stats['total_sessions']}
‚Ä¢ Perceptores √∫nicos: {stats['unique_users']}
‚Ä¢ Promedio de puntos: {stats['average_points']}
‚Ä¢ R√©cord absoluto: {stats['highest_score']} pts
‚Ä¢ Tu estado: Sin sesiones completadas"""
        
        stats_text = f"""üìä <b>ESTAD√çSTICAS DEL SISTEMA</b>

<b>ü§ñ Estado del Sistema:</b>
‚Ä¢ Sesiones activas: {active_sessions}
‚Ä¢ Versi√≥n: 3.2 (Sistema de Ranking)
‚Ä¢ IA Local: {'üü¢ Activa' if blip_model else 'üî¥ Inactiva'}
‚Ä¢ IA en la Nube: {'üü¢ Activa' if openrouter_client else 'üî¥ Inactiva'}
‚Ä¢ Sistema Ranking: {'üü¢ Activo' if nautilus_db else 'üî¥ Inactivo'}

<b>üë§ Tu Perfil:</b>
‚Ä¢ Pseud√≥nimo: <code>{user_pseudonym}</code>{ranking_stats}

<b>üî¨ Caracter√≠sticas v3.2:</b>
‚úÖ Sistema de puntuaci√≥n extendida
‚úÖ Rankings competitivos en tiempo real
‚úÖ Bonificaciones por calidad y detalles
‚úÖ Seguimiento de progreso personal
‚úÖ B√∫squeda din√°mica de objetivos √©ticos
‚úÖ Manejo seguro de im√°genes con fallbacks"""
        
        await update.message.reply_html(stats_text)
        
    except Exception as e:
        logger.error(f"Error en estad√≠sticas: {e}")
        await update.message.reply_text("‚ùå Error al generar estad√≠sticas.")

# --- 14. CONFIGURACI√ìN DE LA APLICACI√ìN ---
def setup_telegram_application() -> Application:
    global telegram_app, nautilus_db
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # Inicializar base de datos de rankings
    try:
        nautilus_db = NautilusDB(openrouter_client=openrouter_client)
        logger.info("‚úÖ Sistema de ranking inicializado")
    except Exception as e:
        logger.error(f"‚ùå Error inicializando sistema de ranking: {e}")
        nautilus_db = None
    
    # Conversation handler principal
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            FASE_1_GESTALT: [MessageHandler(filters.TEXT & ~filters.COMMAND, fase_1_gestalt)],
            FASE_2_SENSORIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, fase_2_sensorial)],
            FASE_3_BOCETO: [MessageHandler(filters.TEXT & ~filters.COMMAND, fase_4_conceptual)],
            FASE_4_CONCEPTUAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, fase_4_conceptual)],
            FINALIZAR: [CommandHandler("finalizar", finalizar)],
        },
        fallbacks=[CommandHandler("cancelar", cancelar)],
        allow_reentry=True
    )
    
    # Agregar handlers
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("estadisticas", estadisticas))
    app.add_handler(CommandHandler("stats", estadisticas))
    app.add_handler(CommandHandler("ranking", ranking))
    app.add_handler(CommandHandler("mi_ranking", mi_ranking))
    app.add_handler(CommandHandler("perfil", mi_ranking))
    
    telegram_app = app
    return app

async def run_services():
    """Ejecuta todos los servicios de manera concurrente."""
    initialize_blip_model()
    app = setup_telegram_application()
    config = uvicorn.Config(app_fastapi, host=FASTAPI_HOST, port=FASTAPI_PORT, log_level="info")
    server = uvicorn.Server(config)
    
    async with app:
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        logger.info("ü§ñ Protocolo Nautilus v3.2 funcionando...")
        logger.info("üîç Sistema DuckDuckGo de b√∫squeda din√°mica activo")
        logger.info("üìä Sistema de investigaci√≥n y datos habilitado")
        logger.info("üèÜ Sistema de ranking competitivo activo")
        await server.serve()
        await app.updater.stop()
        await app.stop()
        await app.shutdown()

def main():
    """Funci√≥n principal de ejecuci√≥n."""
    logger.info("üöÄ Iniciando Protocolo Nautilus v3.2 - Sistema de Ranking Competitivo")
    logger.info("üî¨ Sistema de percepci√≥n remota con b√∫squeda din√°mica")
    logger.info("üõ°Ô∏è Protocolos de seguridad √©tica implementados")
    logger.info("üìä Sistema de investigaci√≥n y pseud√≥nimos activado")
    logger.info("üèÜ Sistema de puntuaci√≥n extendida y rankings")
    
    try:
        asyncio.run(run_services())
    except KeyboardInterrupt:
        logger.info("üëã Protocolo Nautilus cerrado por el usuario.")
    except Exception as e:
        logger.error(f"üí• Error fatal en main: {e}", exc_info=True)

if __name__ == "__main__":
    main()